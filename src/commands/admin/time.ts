import { WASocket, proto, downloadMediaMessage } from '@whiskeysockets/baileys';
import { ICommand } from '@/interfaces/ICommand';
import { canUseCommand } from '@/utils/permissions';
import { getUserDisplayName } from '@/utils/userUtils';
import * as fs from 'fs';
import * as path from 'path';
import { MessageContext } from '@/handlers/message.handler';

type WAMessage = proto.IWebMessageInfo;

// FIX: Interface para o temporizador
interface TimeSession {
  groupJid: string;
  mediaDeadline: number; // prazo para enviar m√≠dia (em minutos)
  totalDuration: number; // dura√ß√£o total do timer (em minutos)
  startTime: Date;
  mediaDeadlineTime: Date; // quando termina o prazo para m√≠dia
  endTime: Date; // quando termina o timer total
  participants: Set<string>; // participantes que precisam enviar m√≠dia
  mediaSent: Set<string>; // participantes que j√° enviaram m√≠dia
  warnings: Map<string, number>; // contador de avisos por usu√°rio
  isActive: boolean;
  confirmed: boolean; // confirma√ß√£o dupla
  removedUsers: Set<string>; // FIX: Adicionar registro de usu√°rios removidos
  mediaDeadlineCompleted: boolean; // FIX: Marcar se o prazo de m√≠dia j√° foi finalizado
}

// FIX: Armazenamento global dos temporizadores ativos
const activeTimers = new Map<string, TimeSession>();

// FIX: Adicionar controle de tentativas inv√°lidas (3 etapas: aviso, advert√™ncia, remo√ß√£o)
const invalidMediaAttempts = new Map<string, number>(); // Map<groupJid:userJid, count>

// FIX: Sistema simples de download de m√≠dias
const TEMP_FOLDER = path.join(process.cwd(), 'temporario');
let mediaCounter = 0;

// FIX: Fun√ß√£o para baixar m√≠dia de forma simples
async function downloadSimpleMedia(sock: WASocket, message: WAMessage, groupJid: string, userJid: string) {
  console.log(`[DEBUG] downloadSimpleMedia iniciado para ${userJid} no grupo ${groupJid}`);
  
  try {
    const messageContent = message.message;
    if (!messageContent) {
      console.log(`[DEBUG] Sem conte√∫do de mensagem`);
      return;
    }
    
    let mediaBuffer: Buffer | null = null;
    let fileExtension = '';

    // NOVO: Verificar se √© mensagem de visualiza√ß√£o √∫nica
    if (messageContent.viewOnceMessage || messageContent.viewOnceMessageV2) {
      console.log(`[DEBUG] Detectada mensagem de visualiza√ß√£o √∫nica`);
      const viewOnceContent = messageContent.viewOnceMessageV2?.message || messageContent.viewOnceMessage?.message;
      
      if (viewOnceContent?.imageMessage) {
        console.log(`[DEBUG] Detectada imagem em visualiza√ß√£o √∫nica`);
        mediaBuffer = await downloadMediaMessage(message, 'buffer', {});
        fileExtension = '.jpg';
      } else if (viewOnceContent?.videoMessage) {
        console.log(`[DEBUG] Detectado v√≠deo em visualiza√ß√£o √∫nica`);
        mediaBuffer = await downloadMediaMessage(message, 'buffer', {});
        fileExtension = '.mp4';
      } else {
        console.log(`[DEBUG] Tipo de m√≠dia n√£o suportado em visualiza√ß√£o √∫nica:`, Object.keys(viewOnceContent || {}));
        return;
      }
    } else {
      // FIX: Extrair m√≠dia baseada no tipo
      if (messageContent.imageMessage) {
        console.log(`[DEBUG] Detectada imagem`);
        mediaBuffer = await downloadMediaMessage(message, 'buffer', {});
        fileExtension = '.jpg';
      } else if (messageContent.videoMessage) {
        console.log(`[DEBUG] Detectado v√≠deo`);
        mediaBuffer = await downloadMediaMessage(message, 'buffer', {});
        fileExtension = '.mp4';
      } else if (messageContent.audioMessage) {
        console.log(`[DEBUG] Detectado √°udio`);
        mediaBuffer = await downloadMediaMessage(message, 'buffer', {});
        fileExtension = '.mp3';
      } else if (messageContent.documentMessage) {
        console.log(`[DEBUG] Detectado documento`);
        mediaBuffer = await downloadMediaMessage(message, 'buffer', {});
        const fileName = messageContent.documentMessage.fileName || 'document';
        fileExtension = path.extname(fileName) || '.bin';
      } else if (messageContent.stickerMessage) {
        console.log(`[DEBUG] Detectado sticker`);
        mediaBuffer = await downloadMediaMessage(message, 'buffer', {});
        fileExtension = '.webp';
      }
    }

    if (mediaBuffer) {
      console.log(`[DEBUG] Buffer de m√≠dia obtido, tamanho: ${mediaBuffer.length} bytes`);
      
      // FIX: Nome simples: grupo_numero.extensao
      const groupNumber = groupJid.split('@')[0].replace('g.us', '');
      const userNumber = userJid.split('@')[0];
      const timestamp = Date.now();
      
      const fileName = `${groupNumber}_${userNumber}_${timestamp}${fileExtension}`;
      const filePath = path.join(TEMP_FOLDER, fileName);
      
      console.log(`[DEBUG] Salvando arquivo: ${filePath}`);
      fs.writeFileSync(filePath, mediaBuffer);
      
      console.log(`[TIMER] M√≠dia salva: ${fileName}`);
    } else {
      console.log(`[DEBUG] Nenhum buffer de m√≠dia obtido`);
    }
  } catch (error) {
    console.error('[ERROR] Erro ao baixar m√≠dia:', error);
  }
}

// FIX: Comando de temporizador com confirma√ß√£o dupla
const timeCommand: ICommand = {
  name: 'time',
  aliases: ['timer', 'temporizador'],
  description: 'Inicia um temporizador que remove quem n√£o enviar m√≠dia (confirma√ß√£o dupla)',
  category: 'admin',
  usage: '!time on [minutos] - Inicia temporizador\n!time off - Para temporizador\n!time status - Status atual',
  handle: async (context: MessageContext) => {
    const { sock, messageInfo: message, args, from: groupJid, sender: userJid, isGroup } = context;
    try {
      if (!isGroup) {
        await sock.sendMessage(groupJid, { 
          text: 'Eita, baby! ü´£ O !time s√≥ funciona em grupos! üíã' 
        });
        return;
      }

      if (!await canUseCommand(sock, groupJid, userJid, 'admin')) {
        await sock.sendMessage(groupJid, { 
          text: 'Eita, amor! üö´ Esse comando !time √© s√≥ pra admins. Voc√™ n√£o tem essa permiss√£o ainda.' 
        });
        return;
      }

      // FIX: Verificar se o bot √© admin
      const groupMetadata = await sock.groupMetadata(groupJid);
      const botJid = sock.user?.id;
      
      // FIX: Remover sufixo :11 do JID do bot para encontrar na lista de participantes
      const normalizedBotJid = botJid?.replace(/:11@s\.whatsapp\.net$/, '@s.whatsapp.net');
      const botParticipant = groupMetadata.participants.find(p => p.id === normalizedBotJid);
      
      console.log('[DEBUG] Verifica√ß√£o de admin do bot:', {
        botJid,
        normalizedBotJid,
        groupJid,
        botParticipant,
        allParticipants: groupMetadata.participants.map(p => ({ id: p.id, admin: p.admin }))
      });
      
      if (!botParticipant || (botParticipant.admin !== 'admin' && botParticipant.admin !== 'superadmin')) {
        console.log('[DEBUG] Bot n√£o √© admin:', { botParticipant, botJid, normalizedBotJid });
        await sock.sendMessage(groupJid, { 
          text: 'Eita, baby! ü´£ Eu preciso ser admin do grupo pra poder usar o !time! üíã' 
        });
        return;
      }
      
      console.log('[DEBUG] Bot √© admin, continuando...');

      const action = args[0]?.toLowerCase();
      const currentTimer = activeTimers.get(groupJid);

      if (action === 'on') {
        // FIX: Iniciar temporizador
        if (currentTimer && currentTimer.isActive) {
          await sock.sendMessage(groupJid, { 
            text: 'Eita, baby! ü´£ J√° tem um temporizador ativo! Use !time off para parar primeiro! üíã' 
          });
          return;
        }

        // FIX: Verificar se foram passados os par√¢metros
        if (!args[1] || !args[2]) {
          const helpMessage = `‚è∞ *COMO USAR O COMANDO TIME* ‚è∞\n\n` +
                             `üìù *Sintaxe:*\n` +
                             `!time on [prazo] [dura√ß√£o]\n\n` +
                             `üì± *Exemplos:*\n` +
                             `‚Ä¢ !time on 5 30 - 5 min para m√≠dia, timer dura 30 min\n` +
                             `‚Ä¢ !time on 1 20 - 1 min para m√≠dia, timer dura 20 min\n` +
                             `‚Ä¢ !time on 10 - 10 min para m√≠dia, timer dura 10 min\n\n` +
                             `‚ö†Ô∏è *ATEN√á√ÉO:* Remove usu√°rios que n√£o enviarem m√≠dia!\n\n` +
                             `_Digite o comando com os tempos desejados!_`;

          await sock.sendMessage(groupJid, { 
            text: helpMessage
          });
          return;
        }

        // FIX: Aceitar dois par√¢metros: prazo para m√≠dia e dura√ß√£o total
        const mediaDeadline = parseInt(args[1]) || 20; // Prazo para enviar m√≠dia (padr√£o: 20 min)
        const totalDuration = parseInt(args[2]) || mediaDeadline; // Dura√ß√£o total (padr√£o: igual ao prazo)
        
        if (mediaDeadline < 1 || mediaDeadline > 1440) { // M√°ximo: 24 horas
          await sock.sendMessage(groupJid, { 
            text: 'Eita, baby! ü´£ O prazo para m√≠dia deve ser entre 1 e 1440 minutos (24 horas)! üíã' 
          });
          return;
        }
        
        if (totalDuration < mediaDeadline || totalDuration > 1440) { // Total deve ser >= prazo e <= 24h
          await sock.sendMessage(groupJid, { 
            text: 'Eita, baby! ü´£ A dura√ß√£o total deve ser maior ou igual ao prazo para m√≠dia e no m√°ximo 1440 minutos! üíã' 
          });
          return;
        }

        // FIX: Primeira confirma√ß√£o
        const adminName = await getUserDisplayName(sock, userJid, groupJid, message.pushName);
        const confirmMessage = `‚è∞ *TEMPORIZADOR DE M√çDIA* ‚è∞\n\n` +
                              `üëë @${adminName} quer iniciar um temporizador!\n\n` +
                              `üì± *Regras:*\n` +
                              `‚Ä¢ Prazo para enviar m√≠dia: ${mediaDeadline} minutos\n` +
                              `‚Ä¢ Dura√ß√£o total do timer: ${totalDuration} minutos\n` +
                              `‚Ä¢ Quem n√£o enviar ser√° removido automaticamente\n` +
                              `‚Ä¢ Avisos ser√£o enviados aos 2 minutos finais do prazo\n\n` +
                              `‚ö†Ô∏è *ATEN√á√ÉO:* Este comando remove usu√°rios!\n\n` +
                              `üî¥ Para confirmar: !time confirm ${mediaDeadline} ${totalDuration}\n` +
                              `üü¢ Para cancelar: !time cancel`;

        await sock.sendMessage(groupJid, { 
          text: confirmMessage,
          mentions: [userJid]
        });

        // FIX: Criar sess√£o pendente de confirma√ß√£o
        const pendingSession: TimeSession = {
          groupJid,
          mediaDeadline,
          totalDuration,
          startTime: new Date(),
          mediaDeadlineTime: new Date(Date.now() + mediaDeadline * 60 * 1000),
          endTime: new Date(Date.now() + totalDuration * 60 * 1000),
          participants: new Set(),
          mediaSent: new Set(),
          warnings: new Map(),
          isActive: false,
          confirmed: false,
          removedUsers: new Set(),
          mediaDeadlineCompleted: false
        };

        activeTimers.set(groupJid, pendingSession);

      } else if (action === 'confirm') {
        // FIX: Segunda confirma√ß√£o
        if (!currentTimer || currentTimer.confirmed) {
          await sock.sendMessage(groupJid, { 
            text: 'Eita, baby! ü´£ N√£o h√° temporizador pendente para confirmar! üíã' 
          });
          return;
        }

        const mediaDeadline = parseInt(args[1]);
        const totalDuration = parseInt(args[2]);
        
        if (mediaDeadline !== currentTimer.mediaDeadline || totalDuration !== currentTimer.totalDuration) {
          await sock.sendMessage(groupJid, { 
            text: 'Eita, baby! ü´£ Os valores n√£o conferem! Use os mesmos valores do comando anterior! üíã' 
          });
          return;
        }

        // FIX: Ativar temporizador
        currentTimer.isActive = true;
        currentTimer.confirmed = true;
        currentTimer.startTime = new Date();
        currentTimer.mediaDeadlineTime = new Date(Date.now() + mediaDeadline * 60 * 1000);
        currentTimer.endTime = new Date(Date.now() + totalDuration * 60 * 1000);

        // FIX: Adicionar todos os participantes (exceto admins)
        for (const participant of groupMetadata.participants) {
          if (participant.admin !== 'admin' && participant.admin !== 'superadmin' && participant.id !== normalizedBotJid) {
            currentTimer.participants.add(participant.id);
          }
        }

        const adminName = await getUserDisplayName(sock, userJid, groupJid, message.pushName);
        const startMessage = `üöÄ *TEMPORIZADOR ATIVADO!* üöÄ\n\n` +
                            `‚è∞ *Prazo para m√≠dia:* ${mediaDeadline} minutos\n` +
                            `‚è∞ *Dura√ß√£o total:* ${totalDuration} minutos\n` +
                            `üë• *Participantes:* ${currentTimer.participants.size} pessoas\n` +
                            `‚è∞ *Prazo termina em:* ${currentTimer.mediaDeadlineTime.toLocaleTimeString('pt-BR')}\n` +
                            `‚è∞ *Timer termina em:* ${currentTimer.endTime.toLocaleTimeString('pt-BR')}\n\n` +
                            `üì± *Envie uma m√≠dia agora ou ser√° removido!*\n\n` +
                            `_Temporizador iniciado por @${adminName}_`;

        await sock.sendMessage(groupJid, { 
          text: startMessage,
          mentions: [userJid]
        });

        // FIX: Iniciar monitoramento
        startTimerMonitoring(sock, groupJid, mediaDeadline, totalDuration);

      } else if (action === 'cancel') {
        // FIX: Cancelar temporizador pendente
        if (!currentTimer || currentTimer.isActive) {
          await sock.sendMessage(groupJid, { 
            text: 'Eita, baby! ü´£ N√£o h√° temporizador pendente para cancelar! üíã' 
          });
          return;
        }

        activeTimers.delete(groupJid);
        await sock.sendMessage(groupJid, { 
          text: '‚úÖ *TEMPORIZADOR CANCELADO!*\n\n_Nenhum usu√°rio ser√° removido._' 
        });

      } else if (action === 'off') {
        // FIX: Parar temporizador ativo
        if (!currentTimer || !currentTimer.isActive) {
          await sock.sendMessage(groupJid, { 
            text: 'Eita, baby! ü´£ N√£o h√° temporizador ativo para parar! üíã' 
          });
          return;
        }

        const remainingParticipants = currentTimer.participants.size - currentTimer.mediaSent.size;
        const totalRemoved = currentTimer.removedUsers.size;
        
        activeTimers.delete(groupJid);

        if (totalRemoved > 0) {
          const removedNames = await Promise.all(
            Array.from(currentTimer.removedUsers).map(async (userId) => {
              try {
                return await getUserDisplayName(sock, userId, groupJid);
              } catch {
                return userId.split('@')[0];
              }
            })
          );

          await sock.sendMessage(groupJid, { 
            text: `üõë *TEMPORIZADOR PARADO!*\n\n` +
                  `üìä *Resultado:*\n` +
                  `‚úÖ M√≠dia enviada: ${currentTimer.mediaSent.size} pessoas\n` +
                  `‚ùå Removidos: ${totalRemoved} pessoas\n` +
                  `‚è≥ Pendentes: ${remainingParticipants} pessoas\n\n` +
                  `üë• *Removidos:*\n${removedNames.map(name => `‚Ä¢ ${name}`).join('\n')}\n\n` +
                  `_Temporizador parado manualmente._`
          });
        } else {
          await sock.sendMessage(groupJid, { 
            text: `üõë *TEMPORIZADOR PARADO!*\n\n` +
                  `üìä *Resultado:*\n` +
                  `‚úÖ M√≠dia enviada: ${currentTimer.mediaSent.size} pessoas\n` +
                  `‚ùå N√£o enviaram: ${remainingParticipants} pessoas\n\n` +
                  `_Ningu√©m foi removido._`
          });
        }

      } else if (action === 'status') {
        // FIX: Status do temporizador
        if (!currentTimer) {
          await sock.sendMessage(groupJid, { 
            text: 'üìä *STATUS DO TEMPORIZADOR*\n\n‚ùå Nenhum temporizador ativo.' 
          });
          return;
        }

        const now = new Date();
        const mediaTimeLeft = Math.max(0, currentTimer.mediaDeadlineTime.getTime() - now.getTime());
        const totalTimeLeft = Math.max(0, currentTimer.endTime.getTime() - now.getTime());
        const mediaMinutesLeft = Math.ceil(mediaTimeLeft / (60 * 1000));
        const totalMinutesLeft = Math.ceil(totalTimeLeft / (60 * 1000));
        const remainingParticipants = currentTimer.participants.size - currentTimer.mediaSent.size;
        const totalRemoved = currentTimer.removedUsers.size;

        const statusMessage = `üìä *STATUS DO TEMPORIZADOR*\n\n` +
                             `‚è∞ *Prazo para m√≠dia:* ${mediaMinutesLeft} minutos restantes\n` +
                             `‚è∞ *Dura√ß√£o total:* ${totalMinutesLeft} minutos restantes\n` +
                             `üë• *Participantes:* ${currentTimer.participants.size} pessoas\n` +
                             `‚úÖ *M√≠dia enviada:* ${currentTimer.mediaSent.size} pessoas\n` +
                             `‚ùå *Removidos:* ${totalRemoved} pessoas\n` +
                             `‚è≥ *Pendentes:* ${remainingParticipants} pessoas\n` +
                             `üîÑ *Status:* ${currentTimer.isActive ? 'Ativo' : 'Pendente de confirma√ß√£o'}`;

        await sock.sendMessage(groupJid, { 
          text: statusMessage
        });

      } else if (action === 'debug') {
        // FIX: Comando de debug para listar todos os temporizadores
        const allTimers = Array.from(activeTimers.entries());
        if (allTimers.length === 0) {
          await sock.sendMessage(groupJid, { 
            text: 'üîç *DEBUG - TEMPORIZADORES*\n\n‚ùå Nenhum temporizador encontrado.' 
          });
          return;
        }

        let debugMessage = 'üîç *DEBUG - TEMPORIZADORES ATIVOS*\n\n';
        for (const [timerGroupJid, timer] of allTimers) {
          debugMessage += `üì± *Grupo:* ${timerGroupJid}\n` +
                         `üîÑ *Ativo:* ${timer.isActive ? 'Sim' : 'N√£o'}\n` +
                         `‚úÖ *Confirmado:* ${timer.confirmed ? 'Sim' : 'N√£o'}\n` +
                         `üë• *Participantes:* ${timer.participants.size}\n` +
                         `üì∏ *M√≠dia enviada:* ${timer.mediaSent.size}\n` +
                         `‚ùå *Removidos:* ${timer.removedUsers.size}\n\n`;
        }

        await sock.sendMessage(groupJid, { 
          text: debugMessage
        });

      } else {
        // FIX: Ajuda
        await sock.sendMessage(groupJid, { 
          text: `‚è∞ *COMANDO TIME - AJUDA* ‚è∞\n\n` +
                `üìù *Como usar:*\n` +
                `‚Ä¢ !time on [prazo] [dura√ß√£o] - Inicia temporizador\n` +
                `‚Ä¢ !time confirm [prazo] [dura√ß√£o] - Confirma temporizador\n` +
                `‚Ä¢ !time cancel - Cancela temporizador pendente\n` +
                `‚Ä¢ !time off - Para temporizador ativo\n` +
                `‚Ä¢ !time status - Status atual\n` +
                `‚Ä¢ !time debug - Lista todos os temporizadores\n\n` +
                `üì± *Exemplo:*\n` +
                `‚Ä¢ !time on 5 30 - 5 min para m√≠dia, timer dura 30 min\n` +
                `‚Ä¢ !time on 10 - 10 min para m√≠dia, timer dura 10 min\n\n` +
                `‚ö†Ô∏è *ATEN√á√ÉO:* Remove usu√°rios que n√£o enviarem m√≠dia!`
        });
      }

    } catch (error) {
      console.error('[ERROR] Erro no comando time:', error);
      await sock.sendMessage(groupJid, { 
        text: 'Eita, baby! ü´£ Deu erro no comando !time! Tenta de novo! üíã' 
      });
    }
  },
};

// FIX: Fun√ß√£o para monitorar o temporizador
function startTimerMonitoring(sock: WASocket, groupJid: string, mediaDeadline: number, totalDuration: number) {
  const timer = activeTimers.get(groupJid);
  if (!timer) return;

  const checkInterval = setInterval(async () => {
    try {
      const currentTimer = activeTimers.get(groupJid);
      if (!currentTimer || !currentTimer.isActive) {
        clearInterval(checkInterval);
        return;
      }

      const now = new Date();
      const mediaTimeLeft = currentTimer.mediaDeadlineTime.getTime() - now.getTime();
      const totalTimeLeft = currentTimer.endTime.getTime() - now.getTime();
      const mediaMinutesLeft = Math.ceil(mediaTimeLeft / (60 * 1000));

      // FIX: Aviso aos 2 minutos finais do prazo para m√≠dia
      if (mediaMinutesLeft === 2) {
        const pendingUsers = Array.from(currentTimer.participants)
          .filter(userId => !currentTimer.mediaSent.has(userId));

        if (pendingUsers.length > 0) {
          const warningMessage = `‚ö†Ô∏è *AVISO FINAL - 2 MINUTOS!* ‚ö†Ô∏è\n\n` +
                                `@${pendingUsers.join(' @')}\n\n` +
                                `üì± *Voc√™s n√£o enviaram m√≠dia e ser√£o removidos em 2 minutos!*\n\n` +
                                `_Enviem uma foto, v√≠deo ou √°udio agora!_`;

          await sock.sendMessage(groupJid, { 
            text: warningMessage,
            mentions: pendingUsers
          });
        }
      }

      // FIX: Finalizar prazo de m√≠dia (remover quem n√£o enviou)
      if (mediaTimeLeft <= 0) {
        await finalizeMediaDeadline(sock, groupJid);
      }

      // FIX: Finalizar temporizador total
      if (totalTimeLeft <= 0) {
        clearInterval(checkInterval);
        await finalizeTimer(sock, groupJid);
      }

    } catch (error) {
      console.error('[ERROR] Erro no monitoramento do timer:', error);
    }
  }, 30000); // Verificar a cada 30 segundos
}

// FIX: Fun√ß√£o para finalizar o prazo de m√≠dia
async function finalizeMediaDeadline(sock: WASocket, groupJid: string) {
  try {
    const timer = activeTimers.get(groupJid);
    if (!timer) return;

    // FIX: Evitar executar duas vezes
    if (timer.mediaDeadlineCompleted) return;

    const usersToRemove = Array.from(timer.participants)
      .filter(userId => !timer.mediaSent.has(userId));

    if (usersToRemove.length > 0) {
      // FIX: Remover usu√°rios que n√£o enviaram m√≠dia
      await sock.groupParticipantsUpdate(groupJid, usersToRemove, 'remove');

      const removedNames = await Promise.all(
        usersToRemove.map(async (userId) => {
          try {
            return await getUserDisplayName(sock, userId, groupJid);
          } catch {
            return userId.split('@')[0];
          }
        })
      );

      const deadlineMessage = `‚è∞ *PRAZO DE M√çDIA FINALIZADO!* ‚è∞\n\n` +
                             `‚úÖ *M√≠dia enviada:* ${timer.mediaSent.size} pessoas\n` +
                             `‚ùå *Removidos:* ${usersToRemove.length} pessoas\n\n` +
                             `üë• *Removidos:*\n${removedNames.map(name => `‚Ä¢ ${name}`).join('\n')}\n\n` +
                             `_Timer continua ativo at√© o fim da dura√ß√£o total._`;

      await sock.sendMessage(groupJid, { 
        text: deadlineMessage
      });

      // Limpar participantes removidos da lista
      for (const userId of usersToRemove) {
        timer.participants.delete(userId);
        timer.removedUsers.add(userId);
      }
    } else {
      await sock.sendMessage(groupJid, { 
        text: `üéâ *PRAZO DE M√çDIA FINALIZADO!*\n\n‚úÖ Todos enviaram m√≠dia! Ningu√©m foi removido.\n\n_Timer continua ativo at√© o fim da dura√ß√£o total._` 
      });
    }

    // FIX: Marcar que o prazo de m√≠dia foi finalizado
    timer.mediaDeadlineCompleted = true;

  } catch (error) {
    console.error('[ERROR] Erro ao finalizar prazo de m√≠dia:', error);
    await sock.sendMessage(groupJid, { 
      text: 'Eita, baby! ü´£ Deu erro ao finalizar o prazo de m√≠dia! Se n√£o funcionar, chama o meu criador: +55 21 6723-3931 - ele vai resolver! üîß' 
    });
  }
}

// FIX: Fun√ß√£o para finalizar o temporizador
async function finalizeTimer(sock: WASocket, groupJid: string) {
  try {
    const timer = activeTimers.get(groupJid);
    if (!timer) return;

    // FIX: Se o prazo de m√≠dia j√° foi finalizado, n√£o precisa verificar novamente
    if (timer.mediaDeadlineCompleted) {
      const totalRemoved = timer.removedUsers.size;
      const totalSent = timer.mediaSent.size;
      
      if (totalRemoved > 0) {
        const removedNames = await Promise.all(
          Array.from(timer.removedUsers).map(async (userId) => {
            try {
              return await getUserDisplayName(sock, userId, groupJid);
            } catch {
              return userId.split('@')[0];
            }
          })
        );

        const finalMessage = `‚è∞ *TEMPORIZADOR FINALIZADO!* ‚è∞\n\n` +
                            `‚úÖ *M√≠dia enviada:* ${totalSent} pessoas\n` +
                            `‚ùå *Removidos:* ${totalRemoved} pessoas\n\n` +
                            `üë• *Removidos:*\n${removedNames.map(name => `‚Ä¢ ${name}`).join('\n')}\n\n` +
                            `_Temporizador encerrado automaticamente._`;

        await sock.sendMessage(groupJid, { 
          text: finalMessage
        });
      } else {
        await sock.sendMessage(groupJid, { 
          text: `üéâ *TEMPORIZADOR FINALIZADO!*\n\n‚úÖ Todos enviaram m√≠dia! Ningu√©m foi removido.` 
        });
      }
    } else {
      // FIX: Se o prazo de m√≠dia n√£o foi finalizado, verificar usu√°rios pendentes
      const usersToRemove = Array.from(timer.participants)
        .filter(userId => !timer.mediaSent.has(userId));

      if (usersToRemove.length > 0) {
        // FIX: Remover usu√°rios que n√£o enviaram m√≠dia
        await sock.groupParticipantsUpdate(groupJid, usersToRemove, 'remove');

        const removedNames = await Promise.all(
          usersToRemove.map(async (userId) => {
            try {
              return await getUserDisplayName(sock, userId, groupJid);
            } catch {
              return userId.split('@')[0];
            }
          })
        );

        const finalMessage = `‚è∞ *TEMPORIZADOR FINALIZADO!* ‚è∞\n\n` +
                            `‚úÖ *M√≠dia enviada:* ${timer.mediaSent.size} pessoas\n` +
                            `‚ùå *Removidos:* ${usersToRemove.length} pessoas\n\n` +
                            `üë• *Removidos:*\n${removedNames.map(name => `‚Ä¢ ${name}`).join('\n')}\n\n` +
                            `_Temporizador encerrado automaticamente._`;

        await sock.sendMessage(groupJid, { 
          text: finalMessage
        });
      } else {
        await sock.sendMessage(groupJid, { 
          text: `üéâ *TEMPORIZADOR FINALIZADO!*\n\n‚úÖ Todos enviaram m√≠dia! Ningu√©m foi removido.` 
        });
      }
    }

    activeTimers.delete(groupJid);

  } catch (error) {
    console.error('[ERROR] Erro ao finalizar timer:', error);
    await sock.sendMessage(groupJid, { 
      text: 'Eita, baby! ü´£ Deu erro ao finalizar o temporizador! Se n√£o funcionar, chama o meu criador: +55 21 6723-3931 - ele vai resolver! üîß' 
    });
  }
}

// FIX: Fun√ß√£o para registrar m√≠dia enviada (ser√° chamada pelo MessageManager)
export function registerMediaSent(groupJid: string, userJid: string, messageType?: string, isAdmin?: boolean, sock?: WASocket, message?: WAMessage) {
  console.log(`[DEBUG] registerMediaSent chamado:`, {
    groupJid,
    userJid,
    messageType,
    isAdmin
  });

  const timer = activeTimers.get(groupJid);
  console.log(`[DEBUG] Timer encontrado:`, {
    hasTimer: !!timer,
    isActive: timer?.isActive,
    hasParticipant: timer?.participants.has(userJid),
    participantsCount: timer?.participants.size,
    mediaSentCount: timer?.mediaSent.size
  });

  if (!timer || !timer.isActive) {
    console.log(`[DEBUG] M√≠dia ignorada - n√£o h√° timer ativo`);
    return;
  }

  // NOVO: Verificar se √© mensagem de visualiza√ß√£o √∫nica
  const isViewOnceMessage = messageType === 'viewOnceMessage' || messageType === 'viewOnceMessageV2';
  const hasViewOnceMedia = message?.message?.viewOnceMessage?.message?.imageMessage ||
                          message?.message?.viewOnceMessage?.message?.videoMessage ||
                          message?.message?.viewOnceMessageV2?.message?.imageMessage ||
                          message?.message?.viewOnceMessageV2?.message?.videoMessage;

  // S√≥ conta como m√≠dia v√°lida: foto, v√≠deo ou √°udio (incluindo visualiza√ß√£o √∫nica)
  const validTypes = ['imageMessage', 'videoMessage', 'audioMessage', 'stickerMessage'];
  const isValidMedia = validTypes.includes(messageType || '') || (isViewOnceMessage && hasViewOnceMedia);
  
  if (isValidMedia) {
    // Salva para admins e n√£o-admins
    if (timer.participants.has(userJid)) {
      timer.mediaSent.add(userJid);
      if (invalidMediaAttempts.has(`${groupJid}:${userJid}`)) {
        invalidMediaAttempts.delete(`${groupJid}:${userJid}`);
      }
      console.log(`[TIMER] M√≠dia v√°lida registrada para ${userJid} no grupo ${groupJid} (tipo: ${messageType})`);
    } else {
      console.log(`[TIMER] M√≠dia de admin registrada para ${userJid} no grupo ${groupJid} (tipo: ${messageType})`);
    }
    // Salva a m√≠dia independente de ser admin ou n√£o
    if (sock && message) {
      console.log(`[DEBUG] Iniciando download da m√≠dia...`);
      downloadSimpleMedia(sock, message, groupJid, userJid);
    }
    return;
  }

  // Se for admin, ignora advert√™ncias
  if (isAdmin) {
    console.log(`[DEBUG] M√≠dia ignorada - usu√°rio √© admin e n√£o √© m√≠dia v√°lida`);
    return;
  }

  // Se for texto ou outro tipo de m√≠dia, avisa, adverte e remove na terceira vez
  const key = `${groupJid}:${userJid}`;
  const attempts = invalidMediaAttempts.get(key) || 0;
  if (attempts === 0) {
    invalidMediaAttempts.set(key, 1);
    if (sock) {
      sock.sendMessage(groupJid, {
        text: `‚ö†Ô∏è @${userJid.split('@')[0]}, s√≥ vale *foto, v√≠deo ou √°udio*! Se mandar de novo, ser√° advertido.`,
        mentions: [userJid]
      });
    }
  } else if (attempts === 1) {
    invalidMediaAttempts.set(key, 2);
    if (sock) {
      sock.sendMessage(groupJid, {
        text: `üö® @${userJid.split('@')[0]}, esta √© sua *advert√™ncia*! S√≥ vale foto, v√≠deo ou √°udio. Se insistir, ser√° removido.`,
        mentions: [userJid]
      });
    }
  } else {
    // Terceira tentativa: remove
    invalidMediaAttempts.delete(key);
    if (sock) {
      sock.groupParticipantsUpdate(groupJid, [userJid], 'remove');
      sock.sendMessage(groupJid, {
        text: `‚ùå @${userJid.split('@')[0]} foi removido por insistir em enviar mensagem inv√°lida durante o temporizador!`,
        mentions: [userJid]
      });
    }
    // Tamb√©m remove da lista de participantes do timer e adiciona ao registro de removidos
    timer.participants.delete(userJid);
    timer.removedUsers.add(userJid);
  }
}

// FIX: Fun√ß√£o para verificar se h√° temporizador ativo
export function hasActiveTimer(groupJid: string): boolean {
  const timer = activeTimers.get(groupJid);
  return timer ? timer.isActive : false;
}

export default timeCommand; 